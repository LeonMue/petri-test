package org.dhbw.ka.ml.petritest.sd.lists.primitive.recursive;import java.io.*;import java.util.List;import java.util.ArrayList;@lombok.EqualsAndHashCode @lombok.ToString public class L {private List<List<Boolean>> l1;public List<List<Boolean>> getL1() {return this.l1;}public void setL1(List<List<Boolean>> value) {this.l1 = value;}public boolean hasL1() {return this.l1 != null;}private List<List<List<Double>>> l2;public List<List<List<Double>>> getL2() {return this.l2;}public void setL2(List<List<List<Double>>> value) {this.l2 = value;}public boolean hasL2() {return this.l2 != null;}public byte[] serialize() {byte[] yyBitVector = new byte[1];try (final org.dhbw.ka.ml.petrilib.io.PetriWriter yyDataOutput = new org.dhbw.ka.ml.petrilib.io.PetriWriter()) {if (this.hasL1()) {yyBitVector[0] |= 1;org.dhbw.ka.ml.petrilib.io.PetriWriter yySerializedList0 = new org.dhbw.ka.ml.petrilib.io.PetriWriter();for (List<Boolean> yyElement0 : l1) {if (yyElement0 == null) {throw new IllegalArgumentException("Elements of list must be not null");}org.dhbw.ka.ml.petrilib.io.PetriWriter yySerializedList1 = new org.dhbw.ka.ml.petrilib.io.PetriWriter();for (Boolean yyElement1 : yyElement0) {if (yyElement1 == null) {throw new IllegalArgumentException("Elements of list must be not null");}org.dhbw.ka.ml.petrilib.serializing.primitives.PetriBool.serialize(yyElement1, yySerializedList1);}yySerializedList0.writeInt(yySerializedList1.size());yySerializedList1.writeTo(yySerializedList0);}yyDataOutput.writeInt(yySerializedList0.size());yySerializedList0.writeTo(yyDataOutput);}if (this.hasL2()) {yyBitVector[0] |= 2;org.dhbw.ka.ml.petrilib.io.PetriWriter yySerializedList0 = new org.dhbw.ka.ml.petrilib.io.PetriWriter();for (List<List<Double>> yyElement0 : l2) {if (yyElement0 == null) {throw new IllegalArgumentException("Elements of list must be not null");}org.dhbw.ka.ml.petrilib.io.PetriWriter yySerializedList1 = new org.dhbw.ka.ml.petrilib.io.PetriWriter();for (List<Double> yyElement1 : yyElement0) {if (yyElement1 == null) {throw new IllegalArgumentException("Elements of list must be not null");}org.dhbw.ka.ml.petrilib.io.PetriWriter yySerializedList2 = new org.dhbw.ka.ml.petrilib.io.PetriWriter();for (Double yyElement2 : yyElement1) {if (yyElement2 == null) {throw new IllegalArgumentException("Elements of list must be not null");}org.dhbw.ka.ml.petrilib.serializing.primitives.PetriDouble.serialize(yyElement2, yySerializedList2);}yySerializedList1.writeInt(yySerializedList2.size());yySerializedList2.writeTo(yySerializedList1);}yySerializedList0.writeInt(yySerializedList1.size());yySerializedList1.writeTo(yySerializedList0);}yyDataOutput.writeInt(yySerializedList0.size());yySerializedList0.writeTo(yyDataOutput);}org.dhbw.ka.ml.petrilib.io.PetriWriter yyResult = new org.dhbw.ka.ml.petrilib.io.PetriWriter();yyResult.writeBytes(yyBitVector);yyDataOutput.writeTo(yyResult);return yyResult.toByteArray();}catch (IOException e) {throw new RuntimeException("This should not happen...", e);}}public static L deserialize(byte[] serialized) throws org.dhbw.ka.ml.petrilib.serializing.ParseException {final L yyResultValue = new L();try (final org.dhbw.ka.ml.petrilib.io.PetriReader yyIn = new org.dhbw.ka.ml.petrilib.io.PetriReader(serialized)) {int yyLengthOfBitVector = 1;while ((yyIn.readByte() & 0x80) != 0) {yyLengthOfBitVector++;}if ((serialized[0] & 1) != 0) {final int yyListLength = yyIn.readInt();final List<List<Boolean>> yyDeserializedList = new ArrayList<List<Boolean>>(yyListLength);final int beginningOffset = yyIn.getOffset();while (yyIn.getOffset() < beginningOffset + yyListLength) {final int yyListLength0 = yyIn.readInt();final List<Boolean> yyDeserializedList0 = new ArrayList<Boolean>();yyDeserializedList.add(yyDeserializedList0);final int yyBeginningOffset0 = yyIn.getOffset();while (yyIn.getOffset() < yyBeginningOffset0 + yyListLength0) {final boolean deserialized = org.dhbw.ka.ml.petrilib.serializing.primitives.PetriBool.deserialize(yyIn);yyDeserializedList0.add(deserialized);}}yyResultValue.setL1(yyDeserializedList);}if ((serialized[0] & 2) != 0) {final int yyListLength = yyIn.readInt();final List<List<List<Double>>> yyDeserializedList = new ArrayList<List<List<Double>>>(yyListLength);final int beginningOffset = yyIn.getOffset();while (yyIn.getOffset() < beginningOffset + yyListLength) {final int yyListLength0 = yyIn.readInt();final List<List<Double>> yyDeserializedList0 = new ArrayList<List<Double>>();yyDeserializedList.add(yyDeserializedList0);final int yyBeginningOffset0 = yyIn.getOffset();while (yyIn.getOffset() < yyBeginningOffset0 + yyListLength0) {final int yyListLength1 = yyIn.readInt();final List<Double> yyDeserializedList1 = new ArrayList<Double>();yyDeserializedList0.add(yyDeserializedList1);final int yyBeginningOffset1 = yyIn.getOffset();while (yyIn.getOffset() < yyBeginningOffset1 + yyListLength1) {final double deserialized = org.dhbw.ka.ml.petrilib.serializing.primitives.PetriDouble.deserialize(yyIn);yyDeserializedList1.add(deserialized);}}}yyResultValue.setL2(yyDeserializedList);}}catch (IOException e) {throw new org.dhbw.ka.ml.petrilib.serializing.ParseException("Unable to parse message because of IOException. Sure your format is correct?", e);}return yyResultValue;}static L yyDeserialize(org.dhbw.ka.ml.petrilib.io.PetriReader petriReader, int length) throws IOException {final L yyResultValue = new L();final int yyBeginOffset = petriReader.getOffset();int yyLengthOfBitVector = 1;while ((petriReader.readByte() & 0x80) != 0) {yyLengthOfBitVector++;}if ((petriReader.getByteAt(yyBeginOffset + 0) & 1) != 0) {final int yyListLength = petriReader.readInt();final List<List<Boolean>> yyDeserializedList = new ArrayList<List<Boolean>>(yyListLength);final int beginningOffset = petriReader.getOffset();while (petriReader.getOffset() < beginningOffset + yyListLength) {final int yyListLength0 = petriReader.readInt();final List<Boolean> yyDeserializedList0 = new ArrayList<Boolean>();yyDeserializedList.add(yyDeserializedList0);final int yyBeginningOffset0 = petriReader.getOffset();while (petriReader.getOffset() < yyBeginningOffset0 + yyListLength0) {final boolean deserialized = org.dhbw.ka.ml.petrilib.serializing.primitives.PetriBool.deserialize(petriReader);yyDeserializedList0.add(deserialized);}}yyResultValue.setL1(yyDeserializedList);}if ((petriReader.getByteAt(yyBeginOffset + 0) & 2) != 0) {final int yyListLength = petriReader.readInt();final List<List<List<Double>>> yyDeserializedList = new ArrayList<List<List<Double>>>(yyListLength);final int beginningOffset = petriReader.getOffset();while (petriReader.getOffset() < beginningOffset + yyListLength) {final int yyListLength0 = petriReader.readInt();final List<List<Double>> yyDeserializedList0 = new ArrayList<List<Double>>();yyDeserializedList.add(yyDeserializedList0);final int yyBeginningOffset0 = petriReader.getOffset();while (petriReader.getOffset() < yyBeginningOffset0 + yyListLength0) {final int yyListLength1 = petriReader.readInt();final List<Double> yyDeserializedList1 = new ArrayList<Double>();yyDeserializedList0.add(yyDeserializedList1);final int yyBeginningOffset1 = petriReader.getOffset();while (petriReader.getOffset() < yyBeginningOffset1 + yyListLength1) {final double deserialized = org.dhbw.ka.ml.petrilib.serializing.primitives.PetriDouble.deserialize(petriReader);yyDeserializedList1.add(deserialized);}}}yyResultValue.setL2(yyDeserializedList);}petriReader.skipBytes((yyBeginOffset + length) - petriReader.getOffset());return yyResultValue;}}