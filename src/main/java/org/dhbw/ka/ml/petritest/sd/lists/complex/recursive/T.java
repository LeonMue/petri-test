package org.dhbw.ka.ml.petritest.sd.lists.complex.recursive;import java.io.*;import java.util.List;import java.util.ArrayList;@lombok.EqualsAndHashCode @lombok.ToString public class T {private List<String> l;public List<String> getL() {return this.l;}public void setL(List<String> value) {this.l = value;}public boolean hasL() {return this.l != null;}private boolean b;private boolean hasB;public boolean getB() {return this.b;}public void setB(boolean value) {this.hasB = true;this.b = value;}public boolean hasB() {return this.hasB;}public byte[] serialize() {byte[] yyBitVector = new byte[1];try (final org.dhbw.ka.ml.petrilib.io.PetriWriter yyDataOutput = new org.dhbw.ka.ml.petrilib.io.PetriWriter()) {if (this.hasL()) {yyBitVector[0] |= 1;org.dhbw.ka.ml.petrilib.io.PetriWriter yySerializedList0 = new org.dhbw.ka.ml.petrilib.io.PetriWriter();for (String yyElement0 : l) {if (yyElement0 == null) {throw new IllegalArgumentException("Elements of list must be not null");}org.dhbw.ka.ml.petrilib.serializing.primitives.PetriString.serialize(yyElement0, yySerializedList0);}yyDataOutput.writeInt(yySerializedList0.size());yySerializedList0.writeTo(yyDataOutput);}if (this.hasB()) {yyBitVector[0] |= 2;org.dhbw.ka.ml.petrilib.serializing.primitives.PetriBool.serialize(b, yyDataOutput);}org.dhbw.ka.ml.petrilib.io.PetriWriter yyResult = new org.dhbw.ka.ml.petrilib.io.PetriWriter();yyResult.writeBytes(yyBitVector);yyDataOutput.writeTo(yyResult);return yyResult.toByteArray();}catch (IOException e) {throw new RuntimeException("This should not happen...", e);}}public static T deserialize(byte[] serialized) throws org.dhbw.ka.ml.petrilib.serializing.ParseException {final T yyResultValue = new T();try (final org.dhbw.ka.ml.petrilib.io.PetriReader yyIn = new org.dhbw.ka.ml.petrilib.io.PetriReader(serialized)) {int yyLengthOfBitVector = 1;while ((yyIn.readByte() & 0x80) != 0) {yyLengthOfBitVector++;}if ((serialized[0] & 1) != 0) {final int yyListLength = yyIn.readInt();final List<String> yyDeserializedList = new ArrayList<String>(yyListLength);final int beginningOffset = yyIn.getOffset();while (yyIn.getOffset() < beginningOffset + yyListLength) {final String deserialized = org.dhbw.ka.ml.petrilib.serializing.primitives.PetriString.deserialize(yyIn);yyDeserializedList.add(deserialized);}yyResultValue.setL(yyDeserializedList);}if ((serialized[0] & 2) != 0) {final boolean deserialized = org.dhbw.ka.ml.petrilib.serializing.primitives.PetriBool.deserialize(yyIn);yyResultValue.setB(deserialized);}}catch (IOException e) {throw new org.dhbw.ka.ml.petrilib.serializing.ParseException("Unable to parse message because of IOException. Sure your format is correct?", e);}return yyResultValue;}static T yyDeserialize(org.dhbw.ka.ml.petrilib.io.PetriReader petriReader, int length) throws IOException {final T yyResultValue = new T();final int yyBeginOffset = petriReader.getOffset();int yyLengthOfBitVector = 1;while ((petriReader.readByte() & 0x80) != 0) {yyLengthOfBitVector++;}if ((petriReader.getByteAt(yyBeginOffset + 0) & 1) != 0) {final int yyListLength = petriReader.readInt();final List<String> yyDeserializedList = new ArrayList<String>(yyListLength);final int beginningOffset = petriReader.getOffset();while (petriReader.getOffset() < beginningOffset + yyListLength) {final String deserialized = org.dhbw.ka.ml.petrilib.serializing.primitives.PetriString.deserialize(petriReader);yyDeserializedList.add(deserialized);}yyResultValue.setL(yyDeserializedList);}if ((petriReader.getByteAt(yyBeginOffset + 0) & 2) != 0) {final boolean deserialized = org.dhbw.ka.ml.petrilib.serializing.primitives.PetriBool.deserialize(petriReader);yyResultValue.setB(deserialized);}petriReader.skipBytes((yyBeginOffset + length) - petriReader.getOffset());return yyResultValue;}}